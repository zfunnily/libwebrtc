// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

#include "chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chart_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataSet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Chart;
}  // namespace protobuf_chart_2eproto
namespace webrtc {
namespace analytics {
class DataSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSet>
      _instance;
} _DataSet_default_instance_;
class ChartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chart>
      _instance;
} _Chart_default_instance_;
class ChartCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChartCollection>
      _instance;
} _ChartCollection_default_instance_;
}  // namespace analytics
}  // namespace webrtc
namespace protobuf_chart_2eproto {
static void InitDefaultsDataSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_DataSet_default_instance_;
    new (ptr) ::webrtc::analytics::DataSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::analytics::DataSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataSet}, {}};

static void InitDefaultsChart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_Chart_default_instance_;
    new (ptr) ::webrtc::analytics::Chart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::analytics::Chart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Chart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChart}, {
      &protobuf_chart_2eproto::scc_info_DataSet.base,}};

static void InitDefaultsChartCollection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_ChartCollection_default_instance_;
    new (ptr) ::webrtc::analytics::ChartCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::analytics::ChartCollection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChartCollection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChartCollection}, {
      &protobuf_chart_2eproto::scc_info_Chart.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DataSet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChartCollection.base);
}

}  // namespace protobuf_chart_2eproto
namespace webrtc {
namespace analytics {

// ===================================================================

void DataSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSet::kXValuesFieldNumber;
const int DataSet::kYValuesFieldNumber;
const int DataSet::kLabelFieldNumber;
const int DataSet::kStyleFieldNumber;
const int DataSet::kHighlightPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSet::DataSet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chart_2eproto::scc_info_DataSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.DataSet)
}
DataSet::DataSet(const DataSet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      x_values_(from.x_values_),
      y_values_(from.y_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlight_points_) -
    reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.DataSet)
}

void DataSet::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.DataSet)
  SharedDtor();
}

void DataSet::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSet& DataSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chart_2eproto::scc_info_DataSet.base);
  return *internal_default_instance();
}


void DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_values_.Clear();
  y_values_.Clear();
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  _internal_metadata_.Clear();
}

bool DataSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.analytics.DataSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_x_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y_values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_y_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.DataSet.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .webrtc.analytics.ChartStyle.Type style = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_style(static_cast< ::webrtc::analytics::ChartStyle_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool highlight_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highlight_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.DataSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.DataSet)
  return false;
#undef DO_
}

void DataSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x_values = 1;
  if (this->x_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _x_values_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->x_values().data(), this->x_values_size(), output);
  }

  // repeated float y_values = 2;
  if (this->y_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _y_values_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->y_values().data(), this->y_values_size(), output);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.DataSet.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label(), output);
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->style(), output);
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->highlight_points(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:webrtc.analytics.DataSet)
}

size_t DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.DataSet)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated float x_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->y_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataSet*>(&from));
}

void DataSet::MergeFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_values_.MergeFrom(from.x_values_);
  y_values_.MergeFrom(from.y_values_);
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.style() != 0) {
    set_style(from.style());
  }
  if (from.highlight_points() != 0) {
    set_highlight_points(from.highlight_points());
  }
}

void DataSet::CopyFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {
  return true;
}

void DataSet::Swap(DataSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSet::InternalSwap(DataSet* other) {
  using std::swap;
  x_values_.InternalSwap(&other->x_values_);
  y_values_.InternalSwap(&other->y_values_);
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(style_, other->style_);
  swap(highlight_points_, other->highlight_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DataSet::GetTypeName() const {
  return "webrtc.analytics.DataSet";
}


// ===================================================================

void Chart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kDataSetsFieldNumber;
const int Chart::kXaxisMinFieldNumber;
const int Chart::kXaxisMaxFieldNumber;
const int Chart::kXaxisLabelFieldNumber;
const int Chart::kYaxisMinFieldNumber;
const int Chart::kYaxisMaxFieldNumber;
const int Chart::kYaxisLabelFieldNumber;
const int Chart::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chart_2eproto::scc_info_Chart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_sets_(from.data_sets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xaxis_label().size() > 0) {
    xaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xaxis_label_);
  }
  yaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.yaxis_label().size() > 0) {
    yaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yaxis_label_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&xaxis_min_, &from.xaxis_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaxis_max_) -
    reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.Chart)
}

void Chart::SharedCtor() {
  xaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xaxis_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  xaxis_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chart& Chart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chart_2eproto::scc_info_Chart.base);
  return *internal_default_instance();
}


void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_sets_.Clear();
  xaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xaxis_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  _internal_metadata_.Clear();
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.analytics.Chart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.analytics.DataSet data_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xaxis_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xaxis_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xaxis_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xaxis_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string xaxis_label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xaxis_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xaxis_label().data(), static_cast<int>(this->xaxis_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.xaxis_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaxis_min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaxis_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaxis_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaxis_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string yaxis_label = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yaxis_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->yaxis_label().data(), static_cast<int>(this->yaxis_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.yaxis_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "webrtc.analytics.Chart.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->data_sets(static_cast<int>(i)),
      output);
  }

  // float xaxis_min = 2;
  if (this->xaxis_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xaxis_min(), output);
  }

  // float xaxis_max = 3;
  if (this->xaxis_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xaxis_max(), output);
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xaxis_label().data(), static_cast<int>(this->xaxis_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.xaxis_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xaxis_label(), output);
  }

  // float yaxis_min = 5;
  if (this->yaxis_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaxis_min(), output);
  }

  // float yaxis_max = 6;
  if (this->yaxis_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaxis_max(), output);
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yaxis_label().data(), static_cast<int>(this->yaxis_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.yaxis_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->yaxis_label(), output);
  }

  // string title = 8;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->title(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:webrtc.analytics.Chart)
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.Chart)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_sets(static_cast<int>(i)));
    }
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xaxis_label());
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yaxis_label());
  }

  // string title = 8;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // float xaxis_min = 2;
  if (this->xaxis_min() != 0) {
    total_size += 1 + 4;
  }

  // float xaxis_max = 3;
  if (this->xaxis_max() != 0) {
    total_size += 1 + 4;
  }

  // float yaxis_min = 5;
  if (this->yaxis_min() != 0) {
    total_size += 1 + 4;
  }

  // float yaxis_max = 6;
  if (this->yaxis_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Chart*>(&from));
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_sets_.MergeFrom(from.data_sets_);
  if (from.xaxis_label().size() > 0) {

    xaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xaxis_label_);
  }
  if (from.yaxis_label().size() > 0) {

    yaxis_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yaxis_label_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.xaxis_min() != 0) {
    set_xaxis_min(from.xaxis_min());
  }
  if (from.xaxis_max() != 0) {
    set_xaxis_max(from.xaxis_max());
  }
  if (from.yaxis_min() != 0) {
    set_yaxis_min(from.yaxis_min());
  }
  if (from.yaxis_max() != 0) {
    set_yaxis_max(from.yaxis_max());
  }
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  using std::swap;
  CastToBase(&data_sets_)->InternalSwap(CastToBase(&other->data_sets_));
  xaxis_label_.Swap(&other->xaxis_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  yaxis_label_.Swap(&other->yaxis_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(xaxis_min_, other->xaxis_min_);
  swap(xaxis_max_, other->xaxis_max_);
  swap(yaxis_min_, other->yaxis_min_);
  swap(yaxis_max_, other->yaxis_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Chart::GetTypeName() const {
  return "webrtc.analytics.Chart";
}


// ===================================================================

void ChartCollection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartCollection::kChartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartCollection::ChartCollection()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chart_2eproto::scc_info_ChartCollection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.analytics.ChartCollection)
}
ChartCollection::ChartCollection(const ChartCollection& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      charts_(from.charts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.ChartCollection)
}

void ChartCollection::SharedCtor() {
}

ChartCollection::~ChartCollection() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.ChartCollection)
  SharedDtor();
}

void ChartCollection::SharedDtor() {
}

void ChartCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChartCollection& ChartCollection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chart_2eproto::scc_info_ChartCollection.base);
  return *internal_default_instance();
}


void ChartCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.ChartCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charts_.Clear();
  _internal_metadata_.Clear();
}

bool ChartCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.analytics.ChartCollection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.analytics.Chart charts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_charts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.analytics.ChartCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.analytics.ChartCollection)
  return false;
#undef DO_
}

void ChartCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.analytics.ChartCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.Chart charts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->charts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->charts(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:webrtc.analytics.ChartCollection)
}

size_t ChartCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.ChartCollection)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .webrtc.analytics.Chart charts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->charts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->charts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartCollection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChartCollection*>(&from));
}

void ChartCollection::MergeFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.ChartCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charts_.MergeFrom(from.charts_);
}

void ChartCollection::CopyFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.ChartCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCollection::IsInitialized() const {
  return true;
}

void ChartCollection::Swap(ChartCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartCollection::InternalSwap(ChartCollection* other) {
  using std::swap;
  CastToBase(&charts_)->InternalSwap(CastToBase(&other->charts_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ChartCollection::GetTypeName() const {
  return "webrtc.analytics.ChartCollection";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::analytics::DataSet* Arena::CreateMaybeMessage< ::webrtc::analytics::DataSet >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::analytics::DataSet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::analytics::Chart* Arena::CreateMaybeMessage< ::webrtc::analytics::Chart >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::analytics::Chart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::analytics::ChartCollection* Arena::CreateMaybeMessage< ::webrtc::analytics::ChartCollection >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::analytics::ChartCollection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
